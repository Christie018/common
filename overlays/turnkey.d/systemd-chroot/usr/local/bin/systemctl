#!/bin/bash -e

# Temporary TKLDev build time systemctl wrapper.
#
# Only passes enable|disable as other actions will fail.

fatal() { echo "FATAL [$0]: $@" 1>&2; exit 1; }
warning() { echo "WARNING [$0]: $@"; }

_start_stop() {
    exit_code=0

    # try service first; note this is also wrapped; see /usl/local/bin/service
    service $2 $1 || exit_code=$?

    if [[ "$exit_code" -eq 0 ]]; then
        return
    else
        # check if an init.d script exists
        initd=/etc/init.d/$2
        if [[ -f "$initd" ]]; then
            $initd $1 || fatal "$initd $1 returned a non-zero exit code."
        else
            fatal "Unable to $1 service: $2 (tried 'service $2 $1', and $initd doesn't exist)."
        fi
    fi
}

[[ "$#" -eq 2 ]] || fatal "At least 2 arguments required (given '$@')."

unset COMMAND SERVICE_NAME IGNORED
while [[ "$#" -gt 0 ]]; do
    case $1 in
        start|stop|restart|reload|enable|disable|mask|unmask|is-failed|is-active)
            if [[ -z "$COMMAND" ]]; then
                COMMAND=$1
                shift
            else
                warning "Already had command set ('$COMMAND')."
                warning "Now setting as '$COMMAND'."
                shift
            fi;;
        --*)
            IGNORED="$IGNORED $1"
            warning "Swtich '$1' will be ignored."
            shift;;
        *)
            if [[ -z "$SERVICE_NAME" ]]; then
                SERVICE_NAME=$1
                shift
            else
                warning "Already had service name set ('$SERVICE_NAME')."
                warning "Resetting to '$SERVICE_NAME'."
                shift
            fi;;
    esac
done

if [[ -n "$COMMAND" ]] && [[ -n "$SERVICE_NAME" ]]; then
    case $COMMAND in
        start)
            _start_stop start $SERVICE_NAME;;
        stop)
            _start_stop stop $SERVICE_NAME;;

        restart|reload)
            _start_stop stop $SERVICE_NAME
            _start_stop start $SERVICE_NAME;;

        enable|disable)
            /usr/bin/systemctl $COMMAND $SERVICE_NAME;;

        mask|unmask)
            /usr/bin/systemctl $COMMAND $SERVICE_NAME;;

        is-failed)
            warning "Call to 'is-failed' always returns FALSE (exit code 1)."
            echo false >2
            exit 1;;

        is-active)
            warning "Call to 'is-active' always returns TRUE (exit code 0)."
            echo true >2
            exit 0;;
    esac
else
    fatal "Command ('$COMMAND') and/or Service name ('$SERVICE_NAME') not set or not found."
fi
